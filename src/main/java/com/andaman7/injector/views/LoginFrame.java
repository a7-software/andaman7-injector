package com.andaman7.injector.views;

import com.andaman7.injector.controllers.MainController;
import com.andaman7.injector.exceptions.IncompleteSettingsException;
import com.andaman7.injector.models.Settings;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.Properties;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The login GUI frame.
 *
 * @author Pierre-Yves (pierreyves.derbaix@gmail.com)<br/>
 *         Copyright A7 Software (http://a7-software.com/)<br/>
 *         Date : 06/02/2015.
 */
public class LoginFrame extends JFrame {

    /**
     * The main controller.
     */
    private final MainController mainController;
    
    /**
     * Creates new form LoginFrame
     * 
     * @param mainController the main controller
     * @param properties the properties used to pre-fill the login form
     */
    public LoginFrame(MainController mainController, Properties properties) {
        initComponents();
        
        this.mainController = mainController;

        setTitle("Andaman 7 - Login");
        
        jButtonLogin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                login();
            }
        });
        
        jTextFieldSettingsApiKey.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if(evt.getKeyCode() == KeyEvent.VK_ENTER)
                    login();
            }
        });

        jTextFieldSettingsServerPort.setText(properties.getProperty("serverPort"));
        jTextFieldSettingsServerHostname.setText(properties.getProperty("serverHostname"));
        jTextFieldSettingsApiKey.setText(properties.getProperty("apiKey"));

        jTextFieldSettingsUsername.setText(properties.getProperty("username"));
        jPasswordFieldSettingsPassword.setText(properties.getProperty("password"));

        if(jTextFieldSettingsServerPort.getText().equals("443")) {
            jComboBoxProtocol.setSelectedItem("https");
        }
        else {
            jComboBoxProtocol.setSelectedItem("http");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelSettingsUser = new javax.swing.JPanel();
        jLabelSettingsUsername = new javax.swing.JLabel();
        jTextFieldSettingsUsername = new javax.swing.JTextField();
        jLabelSettingsPassword = new javax.swing.JLabel();
        jPasswordFieldSettingsPassword = new javax.swing.JPasswordField();
        jLabelSettingTestConnection = new javax.swing.JLabel();
        jPanelSettingsServer = new javax.swing.JPanel();
        jLabelSettingsServerHostname = new javax.swing.JLabel();
        jTextFieldSettingsServerHostname = new javax.swing.JTextField();
        jLabelSettingsServerPort = new javax.swing.JLabel();
        jTextFieldSettingsServerPort = new javax.swing.JTextField();
        jLabelSettingsApiKey = new javax.swing.JLabel();
        jTextFieldSettingsApiKey = new javax.swing.JTextField();
        jLabelProtocol = new javax.swing.JLabel();
        jComboBoxProtocol = new javax.swing.JComboBox();
        jButtonLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanelSettingsUser.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));

        jLabelSettingsUsername.setText("Username");

        jTextFieldSettingsUsername.setInputVerifier(new NoEmptyInputVerifier());
        jTextFieldSettingsUsername.setName("username"); // NOI18N
        jTextFieldSettingsUsername.setPreferredSize(new java.awt.Dimension(125, 22));

        jLabelSettingsPassword.setText("Password");

        jPasswordFieldSettingsPassword.setInputVerifier(new NoEmptyInputVerifier());
        jPasswordFieldSettingsPassword.setName("password"); // NOI18N
        jPasswordFieldSettingsPassword.setPreferredSize(new java.awt.Dimension(125, 22));

        javax.swing.GroupLayout jPanelSettingsUserLayout = new javax.swing.GroupLayout(jPanelSettingsUser);
        jPanelSettingsUser.setLayout(jPanelSettingsUserLayout);
        jPanelSettingsUserLayout.setHorizontalGroup(
            jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSettingsUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSettingsUserLayout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabelSettingTestConnection))
                    .addGroup(jPanelSettingsUserLayout.createSequentialGroup()
                        .addGroup(jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelSettingsUsername)
                            .addComponent(jLabelSettingsPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldSettingsUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jPasswordFieldSettingsPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(282, 282, 282))
        );
        jPanelSettingsUserLayout.setVerticalGroup(
            jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSettingsUserLayout.createSequentialGroup()
                .addGroup(jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSettingsUsername)
                    .addComponent(jTextFieldSettingsUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSettingsUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSettingsPassword)
                    .addComponent(jPasswordFieldSettingsPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelSettingTestConnection)
                .addContainerGap())
        );

        jPanelSettingsServer.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));

        jLabelSettingsServerHostname.setText("Server hostname");

        jTextFieldSettingsServerHostname.setInputVerifier(new NoEmptyInputVerifier());
        jTextFieldSettingsServerHostname.setName("server hostname"); // NOI18N

        jLabelSettingsServerPort.setText("Server port");

        jTextFieldSettingsServerPort.setInputVerifier(new NoEmptyInputVerifier());
        jTextFieldSettingsServerPort.setName("server port"); // NOI18N
        jTextFieldSettingsServerPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSettingsServerPortKeyReleased(evt);
            }
        });

        jLabelSettingsApiKey.setText("API key");

        jTextFieldSettingsApiKey.setInputVerifier(new NoEmptyInputVerifier());
        jTextFieldSettingsApiKey.setName("API key"); // NOI18N

        jLabelProtocol.setText("Protocol");

        jComboBoxProtocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http", "https" }));

        javax.swing.GroupLayout jPanelSettingsServerLayout = new javax.swing.GroupLayout(jPanelSettingsServer);
        jPanelSettingsServer.setLayout(jPanelSettingsServerLayout);
        jPanelSettingsServerLayout.setHorizontalGroup(
            jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSettingsServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSettingsServerHostname)
                    .addComponent(jLabelSettingsApiKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSettingsApiKey, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                    .addComponent(jTextFieldSettingsServerHostname))
                .addGap(18, 18, 18)
                .addGroup(jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSettingsServerLayout.createSequentialGroup()
                        .addComponent(jLabelProtocol)
                        .addGap(26, 26, 26))
                    .addGroup(jPanelSettingsServerLayout.createSequentialGroup()
                        .addComponent(jLabelSettingsServerPort)
                        .addGap(7, 7, 7)))
                .addGroup(jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldSettingsServerPort)
                    .addComponent(jComboBoxProtocol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelSettingsServerLayout.setVerticalGroup(
            jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSettingsServerLayout.createSequentialGroup()
                .addGroup(jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSettingsServerHostname)
                    .addComponent(jTextFieldSettingsServerHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSettingsServerPort)
                    .addComponent(jTextFieldSettingsServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSettingsServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSettingsApiKey)
                    .addComponent(jTextFieldSettingsApiKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProtocol)
                    .addComponent(jComboBoxProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonLogin.setText("Login");
        jButtonLogin.setName("login"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelSettingsUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelSettingsServer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonLogin)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelSettingsServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelSettingsUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonLogin)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Listens for a key to be pressed when focusing the server port text field
     *
     * @param evt the key event
     */
    private void jTextFieldSettingsServerPortKeyReleased(KeyEvent evt) {//GEN-FIRST:event_jTextFieldSettingsServerPortKeyReleased
        if(jTextFieldSettingsServerPort.getText().equals("443"))
            jComboBoxProtocol.setSelectedItem("https");
    }//GEN-LAST:event_jTextFieldSettingsServerPortKeyReleased

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            login();
    }//GEN-LAST:event_formKeyPressed

    /**
     * Verifies if no name of the settings is empty.
     *
     * @return {@code true} if the settings are all initialized, {@code false} otherwise
     */
    private boolean verifySettings() {
        
        boolean state = verifyForm(jPanelSettingsServer);
        
        if(state)
            state = verifyForm(jPanelSettingsUser);
        
        return state;
    }

    /**
     * Verifies a form.
     * @param form the form to verify
     * @return {@code true} if all the values of the form are coherent, {@code false} otherwise
     */
    private boolean verifyForm(JComponent form) {
        
        for(Component item : Arrays.asList(form.getComponents())) {
            
            JComponent component = (JComponent) item;
            InputVerifier iv = component.getInputVerifier();
            
            if((iv != null) && (!iv.verify(component))) {
                JOptionPane.showMessageDialog(this, "The " + item.getName() + " must not be empty.", "Missing setting", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        return true;
    }
    
    private void login() {
        
        try {
            Settings settings = getSettings();
            mainController.login(settings);
            
        } catch (IncompleteSettingsException e) {
            System.err.println(e.getMessage());
            e.printStackTrace(System.err);
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void logout() {
        mainController.logout();
    }

    /**
     * Returns the {@link Settings} according to the form.
     *
     * @return the {@link Settings}
     * @throws IncompleteSettingsException
     * @see Settings
     */
    public Settings getSettings() throws IncompleteSettingsException {

        if(verifySettings()) {
            
            String apiKey = jTextFieldSettingsApiKey.getText();
            String serverHostname = jTextFieldSettingsServerHostname.getText();
            String serverPort = jTextFieldSettingsServerPort.getText();
            String username = jTextFieldSettingsUsername.getText();
            String password = new String(jPasswordFieldSettingsPassword.getPassword());
            
            boolean isHttps = false;
            
            if(jComboBoxProtocol.getSelectedItem().toString().equals("https"))
                isHttps = true;

            Settings settings = new Settings();
            settings.setApiKey(apiKey);
            settings.setServerHostname(serverHostname);
            settings.setServerPort(serverPort);
            settings.setUsername(username);
            settings.setPassword(password);
            settings.setHttps(isHttps);
            
            return settings;
        } else {
            throw new IncompleteSettingsException("The settings are incomplete.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JComboBox jComboBoxProtocol;
    private javax.swing.JLabel jLabelProtocol;
    private javax.swing.JLabel jLabelSettingTestConnection;
    private javax.swing.JLabel jLabelSettingsApiKey;
    private javax.swing.JLabel jLabelSettingsPassword;
    private javax.swing.JLabel jLabelSettingsServerHostname;
    private javax.swing.JLabel jLabelSettingsServerPort;
    private javax.swing.JLabel jLabelSettingsUsername;
    private javax.swing.JPanel jPanelSettingsServer;
    private javax.swing.JPanel jPanelSettingsUser;
    private javax.swing.JPasswordField jPasswordFieldSettingsPassword;
    private javax.swing.JTextField jTextFieldSettingsApiKey;
    private javax.swing.JTextField jTextFieldSettingsServerHostname;
    private javax.swing.JTextField jTextFieldSettingsServerPort;
    private javax.swing.JTextField jTextFieldSettingsUsername;
    // End of variables declaration//GEN-END:variables
}
